@page "/"

@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment Environment
@using BlazorInputFile
@using JENDAMARK_code_assessment.Data
@using JENDAMARK_code_assessment.Services
@using JENDAMARK_code_assessment.Pages
@using System.IO
@inject IToastService toastService

@inherits OwningComponentBase<OperationServices>
<p style="font-size:50px" class="jumbotron align-content-center text-black-50 text-center text-capitalize">Operations</p>
<!-- modal code-->
@if (show)
{
    <div class="modal" tabindex="-1" style="display:block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Operation</h5>
                </div>
                <EditForm Model="@OperationsModel" OnValidSubmit="@InsertOperation">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Name</label>
                            <input type="text" class="form-control" @bind="OperationsModel.Name">
                            <ValidationMessage For="@(()=>OperationsModel.Name)"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label>Operation order</label>
                            <input type="number" class="form-control" @bind="OperationsModel.OrderInWhichToPerform" required />
                            <ValidationMessage For="@(()=>OperationsModel.OrderInWhichToPerform)"></ValidationMessage>
                        </div>
                        <div class="input-group mb-3">
                            <label class="w-100">Device</label>
                            <select class="form-control" @bind="OperationsModel.DeviceID" >
                                <option value="">-- Select Device --</option>
                                @foreach (var dev in Devices)
                                {
                                    if (@dev.DeviceID < 0)
                                    {
                                        <option value="">--Add a device--</option>
                                    }
                                    else
                                    {
                                        <option value="@dev.DeviceID" @key="@dev.DeviceID">@dev.Name</option>
                                    }
                                }
                            </select>
                            <div class="input-group-append">
                                <button class="btn btn-secondary" type="button" @onclick="ShowDeviceModal">+</button>
                            </div>
                        </div>
                        <ValidationMessage For="@(()=>OperationsModel.DeviceID)"></ValidationMessage>
                        <div class="input-group">
                            <div class="form-input">
                                <InputFile id="Picture" accept=".jpg,.PNG,.JPEG" OnChange="OnFileChange"  class="w-100 custom-file-input" />
                                <label class="custom-file-label"></label>
                            </div>

                            @if (isDone)
                            {
                                <label class="alert alert-success disabled w-100">@status<input type="text" value="@fileName" disabled style="width:100%;" /></label>
                            }
                        </div>
                        <ValidationMessage For="@(()=>OperationsModel.ImageData)"></ValidationMessage>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="ShowModal">Close</button>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </div>
                </EditForm>

            </div>
        </div>
    </div>
}
else if (openDeviceModal)
{
    <div class="modal" tabindex="-1" style="display:block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(OperationsModel.OperationID > 0 ? "Update Device": "Add Device")</h5>
                </div>
                <EditForm Model="@DeviceModel" OnValidSubmit="@InsertDevice">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Name</label>
                            <input type="text" class="form-control" @bind="DeviceModel.Name">
                            <ValidationMessage For="@(()=>DeviceModel.Name)"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label>Device type</label>
                            <select class="form-control" @bind="DeviceModel.DeviceType">
                                @foreach (var p in DeviceTypes)
                                {
                                    <option value="@p.Key">@p.Value</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary " @onclick="ShowModal">Back</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="ShowDeviceModal">Close</button>
                        <button type="submit" class="btn btn-primary">Add Device</button>
                    </div>
                </EditForm>

            </div>
        </div>
    </div>
}
<!---->
@if (!operations.Any())
{
    <div>
        <button type="button" class="btn btn-primary" @onclick="ShowModal">Add Operation</button>
        <button type="button" class="btn btn-primary" @onclick="ShowDeviceModal">Add Device</button>
    </div>
    <table class="table table table-striped  table-bordered table-hover" id="myTable">
        <thead class="thead-light">
            <tr>
                <th>Name</th>
                <th>Operation Order</th>
                <th>Device</th>
                <th>Operation Image</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td colspan="4" class="font-weight-bold text-center text-black-50">No data..</td>
            </tr>
        </tbody>
    </table>
}
else
{
    <div class="pb-1">
        <button type="button" class="btn btn-secondary" @onclick="ShowModal">Add Operation</button>
        <button type="button" class="btn btn-primary" @onclick="ShowDeviceModal">Add Device</button>
    </div>

    <table class="table table-striped  table-bordered table-hover" id="myTable">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Operation Order</th>
                <th>Device</th>
                <th>Operation Image</th>
                <th colspan="2">Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var model in operations)
            {
                <tr>
                    <td>@model.Name</td>
                    <td>@model.OrderInWhichToPerform</td>
                    <td>@model.Device.Name</td>
                    <td><img src="data:image/*;base64,@(Convert.ToBase64String(model.ImageData))" width="100px" height="100px" style="border-radius:3px" /></td>
                    <td><button class="btn btn-danger"  @onclick="@(()=>DeleteOperation(model))">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}
<BlazoredToasts/>
@code {
    #region Properties
    bool show = false;
    bool isDone = false;
    bool openDeviceModal = false;
    public byte[] Image { get; set; }
    string fileName;
    string status;
    List<Operations> operations;
    List<Data.Device> Devices;
    List<KeyValuePair<int, string>> DeviceTypes;

    Operations OperationsModel = new Operations();
    Device DeviceModel = new Device();


    #endregion

    #region Modals
    void ShowModal()
    {
        if (!show)
        {
            show = true;

            if (show)
            {
                Devices = Service.GetDevices();
                //need to add code to rerender the list after creating a new device
                openDeviceModal = false;
            }
        }
        else
        {
            show = false;
            isDone = false;
        }
    }
    void ShowDeviceModal()
    {
        if (!openDeviceModal)
        {
            show = false;
            openDeviceModal = true;
        }
        else
        {
            openDeviceModal = false;
            if (openDeviceModal)
            {
                show = false;
            }
        }
    }
    #endregion

    #region Operations & Devices
    protected override void OnInitialized()
    {
        Devices = Service.GetDevices();
        DeviceTypes = Service.GetDeviceTypes();
        operations = Service.GetOperations();
    }
    void InsertOperation()
    {
        OperationsModel.OperationID = 0;
        OperationsModel.ImageData = Image;
        Service.InsertOperation(OperationsModel);
        toastService.ShowSuccess("Operation added successfully", "Operation",null);
   
        operations = Service.GetOperations();
        OperationsModel = new Operations();
        show = false;
    }
    void DeleteOperation(Operations model)
    {
        Service.DeleteOperation(model);
        operations.Clear();
        operations = Service.GetOperations();
        toastService.ShowSuccess("Sucessfully deleted operation", "Delete");
        StateHasChanged();
    }
    void InsertDevice()
    {
        DeviceModel.DeviceID = 0;
        Service.InsertDevices(DeviceModel);
        Devices = Service.GetDevices();
        //Closing device modal then clearing up the device model
        toastService.ShowSuccess("Device added successfully", "Device");
        openDeviceModal = false;
        DeviceModel = new Device();
    }
    async Task OnFileChange(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if (file != null)
        {
            var ms = new MemoryStream();
            fileName = file.Name;
            await file.Data.CopyToAsync(ms);
            Image = ms.ToArray();
            status = $"Image loaded";
            isDone = true;
        }
    }
      #endregion
}

